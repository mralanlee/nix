#!/usr/bin/env bash

# Terminal-based audio device switcher
# Similar to nmtui but for audio devices

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Clear screen and show header
clear
echo -e "${BOLD}${BLUE}Audio Device Manager${NC}"
echo -e "${BLUE}════════════════════════════════════════${NC}\n"

# Get current volume and mute status
volume=$(wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print int($2 * 100)}')
muted=$(wpctl get-volume @DEFAULT_AUDIO_SINK@ | grep -q "MUTED" && echo "true" || echo "false")

# Display current status
if [[ "$muted" == "true" ]]; then
    echo -e "Volume: ${RED}MUTED${NC} ($volume%)"
else
    echo -e "Volume: ${GREEN}$volume%${NC}"
fi
echo -e "${BLUE}────────────────────────────────────────${NC}\n"

# Get current default sink ID
current_sink=$(wpctl status | grep -A 10 "Audio" | grep "│  \*" | head -1 | sed 's/.*\. //' | cut -d' ' -f1)

# Get all sinks
echo -e "${BOLD}Audio Output Devices:${NC}\n"
sinks=$(wpctl status | grep -A 20 "Audio" | grep -E "│   [0-9]+\." | grep -v "Source" | sed 's/│//')

# Create arrays for sink IDs and names
declare -a sink_ids
declare -a sink_names
i=1

while IFS= read -r line; do
    sink_id=$(echo "$line" | sed 's/.*\. //' | cut -d' ' -f1)
    sink_name=$(echo "$line" | sed 's/.*\. [0-9]\+ //' | sed 's/\[.*\]//' | xargs)
    
    sink_ids[$i]=$sink_id
    sink_names[$i]=$sink_name
    
    # Display with indicator for current sink
    if [[ "$sink_id" == "$current_sink" ]]; then
        echo -e "  ${GREEN}►${NC} $i. $sink_name ${GREEN}(current)${NC}"
    else
        echo -e "    $i. $sink_name"
    fi
    ((i++))
done <<< "$sinks"

# Show controls menu
echo -e "\n${BLUE}────────────────────────────────────────${NC}"
echo -e "${BOLD}Controls:${NC}\n"
echo -e "  m. Toggle Mute"
echo -e "  +. Increase Volume (+10%)"
echo -e "  -. Decrease Volume (-10%)"
echo -e "  p. Open PulseAudio Control (GUI)"
echo -e "  q. Quit"

# Get user input
echo -e "\n${BLUE}────────────────────────────────────────${NC}"
echo -en "\nSelect option: "
read -r choice

# Handle selection
case "$choice" in
    [1-9]|[1-9][0-9])
        if [[ -n "${sink_ids[$choice]}" ]]; then
            wpctl set-default "${sink_ids[$choice]}"
            echo -e "\n${GREEN}✓${NC} Switched to: ${sink_names[$choice]}"
            sleep 1
            exec "$0" # Restart the script to show updated status
        else
            echo -e "\n${RED}Invalid selection${NC}"
            sleep 1
        fi
        ;;
    m|M)
        wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
        if [[ "$muted" == "true" ]]; then
            echo -e "\n${GREEN}✓${NC} Unmuted"
        else
            echo -e "\n${YELLOW}✓${NC} Muted"
        fi
        sleep 1
        exec "$0"
        ;;
    +)
        wpctl set-volume @DEFAULT_AUDIO_SINK@ 10%+
        new_vol=$(wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print int($2 * 100)}')
        echo -e "\n${GREEN}✓${NC} Volume: $new_vol%"
        sleep 1
        exec "$0"
        ;;
    -)
        wpctl set-volume @DEFAULT_AUDIO_SINK@ 10%-
        new_vol=$(wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print int($2 * 100)}')
        echo -e "\n${GREEN}✓${NC} Volume: $new_vol%"
        sleep 1
        exec "$0"
        ;;
    p|P)
        pavucontrol &
        ;;
    q|Q)
        exit 0
        ;;
    *)
        echo -e "\n${RED}Invalid option${NC}"
        sleep 1
        exec "$0"
        ;;
esac